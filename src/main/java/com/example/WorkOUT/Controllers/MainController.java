package com.example.WorkOUT.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
     // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() throws Throwable {
        // This returns a JSON or XML with the users
        try{
            return userRepository.findAll();
        }
        catch (Exception exception){
            throw exception.getCause();
        }
    }

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String username
            , @RequestParam String email, @RequestParam String password, @RequestParam String gender) throws Throwable {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if(!userRepository.existsByEmail(email)){
            User user = new User();
            user.setUsername(username);
            user.setEmail(email);
            user.setPassword(password);
            user.setGender(gender);
            userRepository.save(user);
            return "Saved";
        }
        return "Error: User already exist!";
    }

    @PutMapping(path = "/update")
    public @ResponseBody String updateUser(@RequestParam User user) throws Throwable{
        try{
            if (userRepository.existsByUserID(user.getId())){
             userRepository.save(user);
             return "User " +user.getId()+ " has been saved!";
            }
            return "Error: Could not find the user!";
        }catch (Exception exception){
            throw exception.getCause();
        }
    }

    @DeleteMapping(path = "/delete")
    public @ResponseBody String deleteUser (@RequestParam User user) throws Throwable{
        try{
            if (userRepository.existsByUserID(user.getId())){
                userRepository.delete(user);
                return "User " +user.getId()+ " has been removed!";
            }
            return "Error: Could not find the user!";
        }
        catch (Exception exception){
            throw exception.getCause();
        }
    }

    // https://group-10-15.pvt.dsv.su.se/demo/login
    //@RequestParam String email, @RequestParam String password

    @PostMapping(path="/login", consumes="application/json", produces="application/json"
    )// Map ONLY POST Requests
    public @ResponseBody
    ResponseEntity<Boolean> loginUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        // jdbc:http://localhost:8080/demo/login
        // jdbc:mysql://mysql.dsv.su.se/lara3892
        //@RequestParam String email, @RequestParam String password

        if (userRepository.existsByEmailAndPassword(user.getEmail(), user.getPassword())){
            return new ResponseEntity<>(true, HttpStatus.OK);
        }
        else{
            return new ResponseEntity<>(false, HttpStatus.OK);
        }
    }
}