package com.example.WorkOUT.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EventRepository eventRepository;

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() throws Throwable {
        // This returns a JSON or XML with the users
        try{
            return userRepository.findAll();
        }
        catch (Exception exception){
            throw exception.getCause();
        }
    }

    @PostMapping(path="/add", consumes="application/json", produces = "application/json") // Map ONLY POST Requests
    public @ResponseBody
    ResponseEntity<User> addNewUser (@RequestBody User user) {
        String username = user.getUsername();
        String password = user.getPassword();
        String gender = user.getGender();
        String email = user.getEmail();
        //String describe = user.getDescribe();

        boolean emailExists = userRepository.existsByEmail(email);
        if (emailExists) {
            user = userRepository.findUserByEmail(email).get(0);
            return new ResponseEntity<>(user, HttpStatus.CONFLICT);
        }

        boolean usernameExists = userRepository.existsByUsername(username);
        if (usernameExists) {
            user = userRepository.findUserByUsername(username).get(0);
            return new ResponseEntity<>(user, HttpStatus.CONFLICT);
        }
        //user = new User();
        user.setEmail(email);
        user.setGender(gender);
        user.setPassword(password);
        user.setUsername(username);
        //user.setDescribe(describe);
        userRepository.save(user);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }

/*    @PutMapping(path = "/update")
    public @ResponseBody String updateUser(@RequestParam User user) throws Throwable{
        try{
            if (userRepository.existsByUserID(user.getId())){
                userRepository.save(user);
                return "User " +user.getId()+ " has been saved!";
            }
            return "Error: Could not find the user!";
        }catch (Exception exception){
            throw exception.getCause();
        }
    }*/

/*    @DeleteMapping(path = "/delete")
    public @ResponseBody String deleteUser (@RequestParam User user) throws Throwable{
        try{
            if (userRepository.existsByUserID(user.getId())){
                userRepository.delete(user);
                return "User " +user.getId()+ " has been removed!";
            }
            return "Error: Could not find the user!";
        }
        catch (Exception exception){
            throw exception.getCause();
        }
    }*/

    @PostMapping(path="/login", consumes="application/json", produces="application/json")
    public @ResponseBody
    ResponseEntity<User> loginUser (@RequestBody User user) {
        User newUser = userRepository.findByEmailAndPassword(user.getEmail(), user.getPassword());
        if (newUser == null){
            return new ResponseEntity<>(null, HttpStatus.FORBIDDEN);
        }
        else{
            return new ResponseEntity<>(newUser, HttpStatus.OK);
        }
    }

    @GetMapping(path = "/event/all")
    public @ResponseBody Iterable<Event> allEvent() throws Throwable{
        try{
            return eventRepository.findAll();
        }
        catch (Exception exception){
            throw exception;
        }
    }

    @PostMapping(path="/event/add", consumes="application/json", produces = "application/json")
    public @ResponseBody
    ResponseEntity<Event> addNewEvent (@RequestBody Event event) {
        String eventName = event.getEventName();
        String eventStartDate = event.getStartDate();
        String eventStartTimeAndEndTime = event.getStartTimeAndEndTime();
        String eventLocation = event.getEventLocation();
        String describeEvent = event.getDescribeEvent();
        String numberOfParticipants = event.getNumberOfParticipants();
        String workoutLevel = event.getWorkoutLevel();

        event.setEventName(eventName);
        event.setStartDate(eventStartDate);
        event.setStartTimeAndEndTime(eventStartTimeAndEndTime);
        event.setEventLocation(eventLocation);
        event.setDescribeEvent(describeEvent);
        event.setNumberOfParticipants(numberOfParticipants);
        event.setWorkoutLevel(workoutLevel);

        eventRepository.save(event);
        return new ResponseEntity<>(event, HttpStatus.OK);
    }
}